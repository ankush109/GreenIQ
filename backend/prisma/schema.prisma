// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id           String     @id @default(cuid())
  name         String
  subjects     Subject[]
  extraCourses Course[]
  tests        Test[]
  users        User[]
  Material     Material[]
}

model Subject {
  id      String @id @default(cuid())
  name    String
  classId String
  class   Class  @relation(fields: [classId], references: [id])

  tests     Test[]
  users     User[]
  materials Material[]
}

model Material {
  id        String  @id @default(cuid())
  title     String
  content   String
  owner     User    @relation(fields: [userId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
  classId   String
  class     Class   @relation(fields: [classId], references: [id])
  userId    String
}

model User {
  id              String     @id @default(cuid())
  name            String
  email           String     @unique
  classname       String
  password        String
  phonenumber     String     @unique
  role            String     @default("student")
  classes         Class[]
  subjects        Subject[]
  Course          Course[]
  Test            Test[]
  meetingsAsHost  Meeting[]  @relation("host")
  meetingsAsGuest Meeting[]  @relation("guest")
  questions       Question[]
  Answer          Answer[]
  Material        Material[]
}

model Meeting {
  id       String  @id @default(cuid())
  host     User    @relation("host", fields: [hostId], references: [id])
  guest    User    @relation("guest", fields: [guestId], references: [id])
  hostId   String
  guestId  String
  status   String
  notes    String?
  duration Int?
  type     String?
  location String?
  dates    Date[]
}

model Date {
  id        String   @id @default(cuid())
  date      DateTime
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId String
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Answer {
  id         Int       @id @default(autoincrement())
  text       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  owner      User      @relation(fields: [userId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  userId     String
}

model Course {
  id          String @id @default(cuid())
  name        String
  owner       User   @relation(fields: [userId], references: [id])
  userId      String
  description String
  img         String
  class       Class  @relation(fields: [classId], references: [id])
  classId     String
}

model Test {
  id          String   @id @default(cuid())
  description String
  title       String   @unique
  mentorId    String
  assetUrl    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [mentorId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])
  classId     String
  subject     Subject  @relation(fields: [subjectId], references: [id])
  subjectId   String
}
