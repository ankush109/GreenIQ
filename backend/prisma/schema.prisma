generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Conversation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  participantIds String[]
  messages       Chat[]   @relation("ConversationToChat")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([participantIds])
}

model Chat {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId       String // ID of the user sending the message
  receiverId     String // ID of the user receiving the message
  message        String // The chat message content
  timestamp      DateTime     @default(now()) // When the message was sent
  conversationId String       @db.ObjectId // Corrected to use ObjectId for MongoDB
  conversation   Conversation @relation("ConversationToChat", fields: [conversationId], references: [id])

  @@index([senderId, receiverId])
  @@index([conversationId]) // Index for faster lookups based on the conversation
}

model Class {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  subjects Subject[] // One-to-many relationship
  Course   Course[]
  Test     Test[]
}

model Subject {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  class    Class      @relation(fields: [classId], references: [id])
  classId  String     @db.ObjectId
  tests    Test[] // One-to-many relationship
  Material Material[]
}

model Material {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  owner     User    @relation(fields: [userId], references: [id])
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String  @db.ObjectId
  classId   String
  userId    String  @db.ObjectId
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String     @unique
  classname       String
  password        String
  phonenumber     String     @unique
  role            String     @default("student")
  courses         Course[] // Many-to-many relationship via junction collection
  tests           Test[] // Many-to-many relationship via junction collection
  meetingsAsHost  Meeting[]  @relation("host")
  meetingsAsGuest Meeting[]  @relation("guest")
  Material        Material[]
  Question        Question[]
  Answer          Answer[]
}

model Meeting {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  host     User    @relation("host", fields: [hostId], references: [id])
  guest    User    @relation("guest", fields: [guestId], references: [id])
  hostId   String  @db.ObjectId
  guestId  String  @db.ObjectId
  status   String
  notes    String?
  duration Int?
  type     String?
  location String?
  dates    Date[]
}

model Date {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
  meetingId String   @db.ObjectId
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   Answer[] // One-to-many relationship
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Answer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  owner      User      @relation(fields: [userId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId
  userId     String    @db.ObjectId
}

model Course {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  owner       User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  description String
  img         String
  class       Class  @relation(fields: [classId], references: [id])
  classId     String @db.ObjectId
}

model Test {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  title       String   @unique
  mentorId    String   @db.ObjectId
  assetUrl    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [mentorId], references: [id])
  class       Class    @relation(fields: [classId], references: [id])
  classId     String   @db.ObjectId
  subject     Subject  @relation(fields: [subjectId], references: [id])
  subjectId   String   @db.ObjectId
}
